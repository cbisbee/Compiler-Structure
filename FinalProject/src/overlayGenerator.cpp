// This is the file where I will take the base layer ast and 
// apply the overlay layer ast to generate a completely new .skml file
// that is the subset of the base layer that is contained within the overlay layer

// The algorithm that I am currently using is really only valid for points on a plane
// technically it doesn't work great for polar coordinates or lat/long stuff because a 'straight'line
// between to lat/long coordinates isn't actually a straight line but rather curved in real life. Also
// crossing the international date line and fun things like that will not be handled very well by this 
// algorithm because of how the lat/long system works. To get reasonably accurate kml files generated by
// this code is best to not describe a polygon larger than a US state in the overlay kml layer.

// Algorithm steps for now:
// 1) Go through the overlay layer Polygon(s) and get all of the points
// 2) Go through the base layer LineString(s) and get all of the points that fall within the overlay poly(s)
// 3) Go through the base layer Placemarker(s) and get all of the placemarkers that fall with the overlay poly(s)


#include <set> //May not need this
#include <string>
#include <sstream>
#include "overlayGenerator.hpp"

OverlayGenerator::OverlayGenerator(const NodePtr &_baseLayerAst, const NodePtr &_overlayLayerAst)
    : baseLayerAst(_baseLayerAst), overlayLayerAst(_overlayLayerAst){}


//This is where we find all of the LineString stuff in the base layer that is contained inside the overlay layer
struct OverlayLineStringGenerator : public OverlayGenerator {
    OverlayLineStringGenerator(const NodePtr &_baseLayerAst, const NodePtr &_overlayLayerAst)
        : OverlayGenerator(_baseLayerAst, _overlayLayerAst){}
    
    virtual void generate(std::ostream &out){
        //TODO remove this when it actually comes time to use this
        out << "<!-- LineString Section -->" << std::endl;
        linestrings(baseLayerAst,out);
        //TODO remove this when it actually comes time to use this
        out << "<!-- End LineString Section -->" << std::endl;
    }

    void linestrings(const NodePtr &baseLayerAst, std::ostream out){
        switch(baseLayerAst->type()){
            case Node::LINESTRING:{
                LineStringNodePtr lineString = std::dynamic_pointer_cast<LineStringNode>(ast);
                CoordinateListNodePtr coordinateList = std::dynamic_pinter_cast<CoordinateListNode>(lineString->children.at(0));
                int count = 0;
                for(auto child : coordinateList->children){
                    //Get the current coordinate's x, y, and z values
                    NumberLiteralNodePtr xCorNode = std::dynamic_pointer_cast<NumberliteralNode>(child->children.at(0));
                    NumberLiteralNodePtr yCorNode = std::dynamic_pointer_cast<NumberLiteralNode>(child->children.at(1));
                    NumberLiteralNodePtr zCorNode = std::dynamic_pointer_cast<NumberLiteralNode>(child->children.at(2));

                    //Need to find out if this coordinate is contained within the overlay layer's polygon(s)
                    //Then I need to do something with it after I figure that out
                }
            }
            break;
            default:{
                for(auto child : baseLayerAst->children){
                    linestrings(child,out);
                }
            }
            break;
        }
    }
}

//This is where we find all of the Placemarker stuff in the base layer that is contained inside the overlay layer
struct OverlayPlacemarkerGenerator : public OverlayGenerator {
    int numPlacemarkers = 0;
    
    OverlayPlacemarkerGenerator(const NodePtr &_baseLayerAst, const NodePtr &_overlayLayerAst)
        : OverlayGenerator(_baseLayerAst, _overlayLayerAst) {}
    
    virtual void generate(std::ostream &out) {
        //TODO remove the following line when you actually go to use this
        out << "<!-- Placemarkers -->" << std::endl;
        placemarks(baseLayerAst, out);
        //TODO remove the following line when you actually go to use this
        out << "<!-- End of the Placemarkers -->" << std::endl;
    }

    void placemarks(const NodePtr &baseLayerAst, std::ostream &out){
        switch(baseLayerAst->type()){
            case Node::DESCRIPTORS:{
                DescriptorsNodePtr descriptors = std::dynamic_pointer_cast<DescriptorsNode>(ast);
                std::string nameStr = "";
                std::string descStr = "";
                std::string xStr = "";
                std::string yStr = "";
                std::string zStr = "";
                double xCor = 0;
                double yCor = 0;
                double zCor = 0;
                for(auto child : descriptors->children){
                    switch(child-type()){
                        case Node::NAME:{
                            StringLiteralNodePtr nameStringNode = std::dynamic_pointer_cast<StringLiteralNode>(child->children.at(0));
                            //Do something with this
                        }
                        break;
                        case Node::DESCRIPTION:{
                            StringLiteralNodePtr descriptionStringNode = std::dynamic_pointer_cast<StringLiteralNode>(child->children.at(0));
                            //Do something with this
                        }
                        break;
                        case Node::POINT:{
                            CoordinateNodePtr corNode = std::dynamic_pointer_cast<CoordinateNode>(child->children.at(0));
                            NumberLiteralNodePtr xCorNode = std::dynamic_pointer_cast<NumberLiteralNode>(corNode->children.at(0));
                            NumberLiteralNodePtr yCorNode = std::dynamic_pointer_cast<NumberLiteralNode>(corNode->children.at(1));
                            numberLiteralNodePtr zCorNode = std::dynamic_pointer_cast<NumberLiteralNode>(corNode->children.at(2));

                            xCor = xCorNode->numberLiteral;
                            yCor = yCorNode->numberLiteral;
                            zCor = zCorNode->numberLiteral;

                            //Figure out if this coordinate falls within the overlay layer poly

                            ++numPlacemarkers;
                        }
                        break;
                    }
                }
            }
            break;
            default:{
                for(auto child : baseLayerAst->children){
                    placemarks(child,out);
                }
            }
            break;
        }
    };
}
