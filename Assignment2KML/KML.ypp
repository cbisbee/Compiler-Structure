%{
#include <stdio.h>
#include <iostream>
#include <string.h>
#include "KML.h"

#define DEBUG_PARSER 1

int yywrap();
int yylex();
void yyerror(const char *str);

NodePtr program(0);
%}

%token OPEN_KML CLOSE_KML OPEN_DOCUMENT CLOSE_DOCUMENT OPEN_PLACEMARK CLOSE_PLACEMARK OPEN_DESCRIPTION CLOSE_DESCRIPTION
OPEN_NAME CLOSE_NAME OPEN OPEN_POINT CLOSE_POINT OPEN_COORDINATE CLOSE_COORDINATE  COMMA_DELIMITER STRING_LITERAL NUMBER_LITERAL WS EOL

%%
program:
kml
{
#if DEBUG_PARSER == 1
  std:cout << "program : kml=" << $1 << std::endl;
#endif
  program = $1;
}
; /*program*/

kml:
OPEN_KML document CLOSE_KML
{
  std::cout << "kml
}
; /*document*/

document:
/* empty */
{

}
|
OPEN_DOCUMENT major_tag CLOSE_DOCUMENT
{

}
; /*document*/

major_tag:
/* empty */
{

}
|
major_tag placemarker
{

}
; /*major_tag*/

placemarker:
OPEN_PLACEMARK descriptor CLOSE_PLACEMARK
{

}
; /*placemarker*/

descriptor:
/* empty */
{

}
|
descriptor minor_tag
{

}
; /*descriptor*/

minor_tag:
name_tag
{

}
|
description_tag
{

}
|
point_tag
{

}
; /*minor_tag*/

name_tag:
OPEN_NAME STRING_LITERAL CLOSE_NAME
{

}
; /*name tag*/

description_tag:
OPEN_DESCRIPTION STRING_LITERAL CLOSE_DESCRIPTION
{

}
; /*description tag*/

point_tag:
OPEN_POINT coordinate CLOSE_POINT
{

}
; /*point_tag*/

coordinate:
OPEN_COORDINATE NUMBER_LITERAL COMMA_DELIMITER NUMBER_LITERAL COMMA_DELIMITER NUMBER_LITERAL CLOSE_COORDINATE
{

}
; /*coordinate*/

%%

int yywrap()
{
  return 1;
} 

void yyerror(const char *str)
{
  fprintf(stderr,"error: %s\n",str);
}

int main(int argc, char *argv[])
{
  yyparse();
  if (!! program) {
    program->print(std::cout);
  } else {
    std::cout << "syntax error." << std::endl;
  }
  return 0;
} 
