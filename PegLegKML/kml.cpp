/* A recursive-descent parser generated by peg 0.1.18 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 35
#line 1 "kml.leg"

           #include <stdio.h>     /* printf() */
           #include <stdlib.h>    /* atoi() */
           #include <vector>
           #include "KML.h"
           #include "generator.hpp"
           #include <iostream>
           int vars[26];
           int i = 0;
           NodePtr program(0);
           std::vector<NodePtr> descriptorsVector;
           std::vector<NodePtr> coordinatesVector;
           std::vector<NodePtr> minorTagsVector;
           std::vector<NodePtr> majorTagsVector;

           #define DEBUG 0       

#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      long offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_COMMA_DELIMETER(yycontext *yy); /* 35 */
YY_RULE(int) yy_NUMBER_LITERAL(yycontext *yy); /* 34 */
YY_RULE(int) yy_CLOSE_COORDINATE(yycontext *yy); /* 33 */
YY_RULE(int) yy_SINGLECOR(yycontext *yy); /* 32 */
YY_RULE(int) yy_OPEN_COORDINATE(yycontext *yy); /* 31 */
YY_RULE(int) yy_CLOSE_POINT(yycontext *yy); /* 30 */
YY_RULE(int) yy_COOR(yycontext *yy); /* 29 */
YY_RULE(int) yy_OPEN_POINT(yycontext *yy); /* 28 */
YY_RULE(int) yy_CLOSE_DESCRIPTION(yycontext *yy); /* 27 */
YY_RULE(int) yy_OPEN_DESCRIPTION(yycontext *yy); /* 26 */
YY_RULE(int) yy_CLOSE_NAME(yycontext *yy); /* 25 */
YY_RULE(int) yy_STRING_LITERAL(yycontext *yy); /* 24 */
YY_RULE(int) yy_OPEN_NAME(yycontext *yy); /* 23 */
YY_RULE(int) yy_FULL_POINT_TAG(yycontext *yy); /* 22 */
YY_RULE(int) yy_FULL_DESCRIPTION_TAG(yycontext *yy); /* 21 */
YY_RULE(int) yy_FULL_NAME_TAG(yycontext *yy); /* 20 */
YY_RULE(int) yy_MINOR_TAGS(yycontext *yy); /* 19 */
YY_RULE(int) yy_CLOSE_LINESTRING(yycontext *yy); /* 18 */
YY_RULE(int) yy_COORDINATES_LIST(yycontext *yy); /* 17 */
YY_RULE(int) yy_OPEN_LINESTRING(yycontext *yy); /* 16 */
YY_RULE(int) yy_CLOSE_PLACEMARKER(yycontext *yy); /* 15 */
YY_RULE(int) yy_DESCRIPTORS(yycontext *yy); /* 14 */
YY_RULE(int) yy_OPEN_PLACEMARKER(yycontext *yy); /* 13 */
YY_RULE(int) yy_FULL_LINESTRING_TAG(yycontext *yy); /* 12 */
YY_RULE(int) yy_FULL_PLACEMARKER_TAG(yycontext *yy); /* 11 */
YY_RULE(int) yy_CLOSE_DOCUMENT(yycontext *yy); /* 10 */
YY_RULE(int) yy_MAJOR_TAGS(yycontext *yy); /* 9 */
YY_RULE(int) yy_OPEN_DOCUMENT(yycontext *yy); /* 8 */
YY_RULE(int) yy_CLOSE_KML(yycontext *yy); /* 7 */
YY_RULE(int) yy_DOCUMENT(yycontext *yy); /* 6 */
YY_RULE(int) yy_OPEN_KML(yycontext *yy); /* 5 */
YY_RULE(int) yy_WS(yycontext *yy); /* 4 */
YY_RULE(int) yy_EOL(yycontext *yy); /* 3 */
YY_RULE(int) yy_KML_DOC(yycontext *yy); /* 2 */
YY_RULE(int) yy_PROGRAM(yycontext *yy); /* 1 */

YY_ACTION(void) yy_1_STRING_LITERAL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_STRING_LITERAL\n"));
  {
#line 299
  
    __ = NodePtr(new StringLiteralNode(yytext)); 
    #if DEBUG == 1
        printf("STRING-LITERAL %s\n",yytext);
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_NUMBER_LITERAL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_NUMBER_LITERAL\n"));
  {
#line 291
  
    __ = NodePtr(new NumberLiteralNode(atof(yytext))); 
    #if DEBUG == 1
        printf("NUMBER-LITERAL %d\n",atof(yytext));
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_EOL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_EOL\n"));
  {
#line 284
  
    #if DEBUG == 1
        printf("EOL\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_WS(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_WS\n"));
  {
#line 277
  
    #if DEBUG == 1
        printf("WS\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_COMMA_DELIMETER(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_COMMA_DELIMETER\n"));
  {
#line 270
  
    #if DEBUG == 1
        printf("COMMA-DELIMETER\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_COORDINATE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_COORDINATE\n"));
  {
#line 263
  
    #if DEBUG == 1
        printf("CLOSE-COORDINATE\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_COORDINATE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_COORDINATE\n"));
  {
#line 256
  
    #if DEBUG == 1
        printf("OPEN-COORDINATE\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_POINT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_POINT\n"));
  {
#line 249
  
    #if DEBUG == 1
        printf("CLOSE-POINT\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_POINT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_POINT\n"));
  {
#line 242
  
    #if DEBUG == 1
        printf("OPEN-POINT\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_DESCRIPTION(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_DESCRIPTION\n"));
  {
#line 235
  
    #if DEBUG == 1
        printf("CLOSE-DESCRIPTION\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_DESCRIPTION(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_DESCRIPTION\n"));
  {
#line 228
  
    #if DEBUG == 1
        printf("OPEN-DESCRIPTION\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_NAME(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_NAME\n"));
  {
#line 221
  
    #if DEBUG == 1
        printf("CLOSE-NAME\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_NAME(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_NAME\n"));
  {
#line 214
  
    #if DEBUG == 1
        printf("OPEN-NAME\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_PLACEMARKER(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_PLACEMARKER\n"));
  {
#line 207
  
    #if DEBUG == 1
        printf("CLOSE-PLACEMARKER\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_PLACEMARKER(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_PLACEMARKER\n"));
  {
#line 200
  
    #if DEBUG == 1
        printf("OPEN-PLACEMARKER\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_LINESTRING(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_LINESTRING\n"));
  {
#line 193
  
    #if DEBUG == 1
        printf("CLOSE-LINESTRING\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_LINESTRING(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_LINESTRING\n"));
  {
#line 186
  
    #if DEBUG == 1
        printf("OPEN-LINESTRING\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_DOCUMENT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_DOCUMENT\n"));
  {
#line 179
  
    #if DEBUG == 1
        printf("CLOSE-DOCUMENT\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_DOCUMENT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_DOCUMENT\n"));
  {
#line 172
  
    #if DEBUG == 1
        printf("OPEN-DOCUMENT\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_KML(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_KML\n"));
  {
#line 165
  
    #if DEBUG == 1
        printf("CLOSE-KML\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_KML(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_KML\n"));
  {
#line 158
  
    #if DEBUG == 1
        printf("OPEN-KML\n");
    #endif
;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_SINGLECOR(yycontext *yy, char *yytext, int yyleng)
{
#define num3 yy->__val[-1]
#define num2 yy->__val[-2]
#define num1 yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_SINGLECOR\n"));
  {
#line 145
  
        __ = NodePtr(new CoordinateNode(num1,num2,num3));
        coordinatesVector.push_back(__);
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef num3
#undef num2
#undef num1
}
YY_ACTION(void) yy_1_COORDINATES_LIST(yycontext *yy, char *yytext, int yyleng)
{
#define cor yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_COORDINATES_LIST\n"));
  {
#line 136
  
        __ = NodePtr(new CoordinateListNode()); 
        __->children = coordinatesVector;
        coordinatesVector.clear();
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef cor
}
YY_ACTION(void) yy_1_COOR(yycontext *yy, char *yytext, int yyleng)
{
#define cor yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_COOR\n"));
  {
#line 129
  
        __ = cor;
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef cor
}
YY_ACTION(void) yy_1_FULL_POINT_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define cor yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_POINT_TAG\n"));
  {
#line 123
  
        __ = NodePtr(new PointNode(cor));
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef cor
}
YY_ACTION(void) yy_1_FULL_DESCRIPTION_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define descr yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_DESCRIPTION_TAG\n"));
  {
#line 116
  
        __ = NodePtr(new DescriptionNode(descr));
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef descr
}
YY_ACTION(void) yy_1_FULL_NAME_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define name yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_NAME_TAG\n"));
  {
#line 109
  
        __ = NodePtr(new NameNode(name));
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef name
}
YY_ACTION(void) yy_3_MINOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define point yy->__val[-1]
#define description yy->__val[-2]
#define name yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_MINOR_TAGS\n"));
  {
#line 101
  
        __ = point;
        minorTagsVector.push_back(__);
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef point
#undef description
#undef name
}
YY_ACTION(void) yy_2_MINOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define point yy->__val[-1]
#define description yy->__val[-2]
#define name yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_MINOR_TAGS\n"));
  {
#line 95
  
        __ = description;
        minorTagsVector.push_back(__);
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef point
#undef description
#undef name
}
YY_ACTION(void) yy_1_MINOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define point yy->__val[-1]
#define description yy->__val[-2]
#define name yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_MINOR_TAGS\n"));
  {
#line 89
  
        __ = name;
        minorTagsVector.push_back(__);
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef point
#undef description
#undef name
}
YY_ACTION(void) yy_1_DESCRIPTORS(yycontext *yy, char *yytext, int yyleng)
{
#define minortag yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_DESCRIPTORS\n"));
  {
#line 80
  
        __ = NodePtr(new DescriptorsNode()); 
        __->children = minorTagsVector;
        minorTagsVector.clear();
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef minortag
}
YY_ACTION(void) yy_1_FULL_LINESTRING_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define corList yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_LINESTRING_TAG\n"));
  {
#line 73
  
        __ = NodePtr(new LineStringNode(corList));
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef corList
}
YY_ACTION(void) yy_1_FULL_PLACEMARKER_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define descriptors yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_PLACEMARKER_TAG\n"));
  {
#line 66
   
        __ = NodePtr(new PlacemarkerNode(descriptors)); 
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef descriptors
}
YY_ACTION(void) yy_2_MAJOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define linestring yy->__val[-1]
#define placemarker yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_MAJOR_TAGS\n"));
  {
#line 58
  
        __ = linestring;
        majorTagsVector.push_back(__);
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef linestring
#undef placemarker
}
YY_ACTION(void) yy_1_MAJOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define linestring yy->__val[-1]
#define placemarker yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_MAJOR_TAGS\n"));
  {
#line 52
  
        __ = placemarker;
        majorTagsVector.push_back(__);
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef linestring
#undef placemarker
}
YY_ACTION(void) yy_2_DOCUMENT(yycontext *yy, char *yytext, int yyleng)
{
#define majortag yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_DOCUMENT\n"));
  {
#line 45
  
        __ = NodePtr(new DocumentNode());
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef majortag
}
YY_ACTION(void) yy_1_DOCUMENT(yycontext *yy, char *yytext, int yyleng)
{
#define majortag yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_DOCUMENT\n"));
  {
#line 38
  
        __ = NodePtr(new DocumentNode()); 
        __->children = majorTagsVector;
        majorTagsVector.clear();
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef majortag
}
YY_ACTION(void) yy_1_KML_DOC(yycontext *yy, char *yytext, int yyleng)
{
#define doc yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_KML_DOC\n"));
  {
#line 31
  
        __ = NodePtr(new KMLNode(doc)); //expecting a document node as param
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef doc
}
YY_ACTION(void) yy_1_PROGRAM(yycontext *yy, char *yytext, int yyleng)
{
#define kml yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_PROGRAM\n"));
  {
#line 21
  
        program = kml; 
        #if DEBUG == 1 
            printf("Valid Doc!\n"); 
        #endif
    ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef kml
}

YY_RULE(int) yy_COMMA_DELIMETER(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "COMMA_DELIMETER"));  if (!yymatchChar(yy, ',')) goto l1;  yyDo(yy, yy_1_COMMA_DELIMETER, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "COMMA_DELIMETER", yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COMMA_DELIMETER", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_NUMBER_LITERAL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "NUMBER_LITERAL"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l2;
#undef yytext
#undef yyleng
  }
  {  int yypos3= yy->__pos, yythunkpos3= yy->__thunkpos;
  {  int yypos5= yy->__pos, yythunkpos5= yy->__thunkpos;  if (!yymatchChar(yy, '-')) goto l6;  goto l5;
  l6:;	  yy->__pos= yypos5; yy->__thunkpos= yythunkpos5;  if (!yymatchChar(yy, '+')) goto l3;
  }
  l5:;	  goto l4;
  l3:;	  yy->__pos= yypos3; yy->__thunkpos= yythunkpos3;
  }
  l4:;	  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l2;
  l7:;	
  {  int yypos8= yy->__pos, yythunkpos8= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l8;  goto l7;
  l8:;	  yy->__pos= yypos8; yy->__thunkpos= yythunkpos8;
  }
  {  int yypos9= yy->__pos, yythunkpos9= yy->__thunkpos;  if (!yymatchChar(yy, '.')) goto l9;  goto l10;
  l9:;	  yy->__pos= yypos9; yy->__thunkpos= yythunkpos9;
  }
  l10:;	
  {  int yypos11= yy->__pos, yythunkpos11= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l11;
  l13:;	
  {  int yypos14= yy->__pos, yythunkpos14= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l14;  goto l13;
  l14:;	  yy->__pos= yypos14; yy->__thunkpos= yythunkpos14;
  }  goto l12;
  l11:;	  yy->__pos= yypos11; yy->__thunkpos= yythunkpos11;
  }
  l12:;	  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l2;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_NUMBER_LITERAL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "NUMBER_LITERAL", yy->__buf+yy->__pos));
  return 1;
  l2:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NUMBER_LITERAL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_COORDINATE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_COORDINATE"));  if (!yymatchString(yy, "</coordinates>")) goto l15;  yyDo(yy, yy_1_CLOSE_COORDINATE, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_COORDINATE", yy->__buf+yy->__pos));
  return 1;
  l15:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_COORDINATE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_SINGLECOR(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "SINGLECOR"));
  l17:;	
  {  int yypos18= yy->__pos, yythunkpos18= yy->__thunkpos;  if (!yy_EOL(yy)) goto l18;  goto l17;
  l18:;	  yy->__pos= yypos18; yy->__thunkpos= yythunkpos18;
  }
  l19:;	
  {  int yypos20= yy->__pos, yythunkpos20= yy->__thunkpos;  if (!yy_WS(yy)) goto l20;  goto l19;
  l20:;	  yy->__pos= yypos20; yy->__thunkpos= yythunkpos20;
  }  if (!yy_NUMBER_LITERAL(yy)) goto l16;  yyDo(yy, yySet, -3, 0);  if (!yy_COMMA_DELIMETER(yy)) goto l16;  if (!yy_NUMBER_LITERAL(yy)) goto l16;  yyDo(yy, yySet, -2, 0);  if (!yy_COMMA_DELIMETER(yy)) goto l16;  if (!yy_NUMBER_LITERAL(yy)) goto l16;  yyDo(yy, yySet, -1, 0);
  l21:;	
  {  int yypos22= yy->__pos, yythunkpos22= yy->__thunkpos;  if (!yy_EOL(yy)) goto l22;  goto l21;
  l22:;	  yy->__pos= yypos22; yy->__thunkpos= yythunkpos22;
  }
  l23:;	
  {  int yypos24= yy->__pos, yythunkpos24= yy->__thunkpos;  if (!yy_WS(yy)) goto l24;  goto l23;
  l24:;	  yy->__pos= yypos24; yy->__thunkpos= yythunkpos24;
  }  yyDo(yy, yy_1_SINGLECOR, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "SINGLECOR", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l16:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SINGLECOR", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_COORDINATE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_COORDINATE"));  if (!yymatchString(yy, "<coordinates>")) goto l25;  yyDo(yy, yy_1_OPEN_COORDINATE, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_COORDINATE", yy->__buf+yy->__pos));
  return 1;
  l25:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_COORDINATE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_POINT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_POINT"));  if (!yymatchString(yy, "</Point>")) goto l26;  yyDo(yy, yy_1_CLOSE_POINT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_POINT", yy->__buf+yy->__pos));
  return 1;
  l26:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_POINT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_COOR(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "COOR"));
  l28:;	
  {  int yypos29= yy->__pos, yythunkpos29= yy->__thunkpos;  if (!yy_EOL(yy)) goto l29;  goto l28;
  l29:;	  yy->__pos= yypos29; yy->__thunkpos= yythunkpos29;
  }
  l30:;	
  {  int yypos31= yy->__pos, yythunkpos31= yy->__thunkpos;  if (!yy_WS(yy)) goto l31;  goto l30;
  l31:;	  yy->__pos= yypos31; yy->__thunkpos= yythunkpos31;
  }  if (!yy_OPEN_COORDINATE(yy)) goto l27;
  l32:;	
  {  int yypos33= yy->__pos, yythunkpos33= yy->__thunkpos;  if (!yy_EOL(yy)) goto l33;  goto l32;
  l33:;	  yy->__pos= yypos33; yy->__thunkpos= yythunkpos33;
  }
  l34:;	
  {  int yypos35= yy->__pos, yythunkpos35= yy->__thunkpos;  if (!yy_WS(yy)) goto l35;  goto l34;
  l35:;	  yy->__pos= yypos35; yy->__thunkpos= yythunkpos35;
  }  if (!yy_SINGLECOR(yy)) goto l27;  yyDo(yy, yySet, -1, 0);
  l36:;	
  {  int yypos37= yy->__pos, yythunkpos37= yy->__thunkpos;  if (!yy_EOL(yy)) goto l37;  goto l36;
  l37:;	  yy->__pos= yypos37; yy->__thunkpos= yythunkpos37;
  }
  l38:;	
  {  int yypos39= yy->__pos, yythunkpos39= yy->__thunkpos;  if (!yy_WS(yy)) goto l39;  goto l38;
  l39:;	  yy->__pos= yypos39; yy->__thunkpos= yythunkpos39;
  }  if (!yy_CLOSE_COORDINATE(yy)) goto l27;
  l40:;	
  {  int yypos41= yy->__pos, yythunkpos41= yy->__thunkpos;  if (!yy_EOL(yy)) goto l41;  goto l40;
  l41:;	  yy->__pos= yypos41; yy->__thunkpos= yythunkpos41;
  }
  l42:;	
  {  int yypos43= yy->__pos, yythunkpos43= yy->__thunkpos;  if (!yy_WS(yy)) goto l43;  goto l42;
  l43:;	  yy->__pos= yypos43; yy->__thunkpos= yythunkpos43;
  }  yyDo(yy, yy_1_COOR, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "COOR", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l27:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COOR", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_POINT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_POINT"));  if (!yymatchString(yy, "<Point>")) goto l44;  yyDo(yy, yy_1_OPEN_POINT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_POINT", yy->__buf+yy->__pos));
  return 1;
  l44:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_POINT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_DESCRIPTION(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_DESCRIPTION"));  if (!yymatchString(yy, "</description>")) goto l45;  yyDo(yy, yy_1_CLOSE_DESCRIPTION, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_DESCRIPTION", yy->__buf+yy->__pos));
  return 1;
  l45:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_DESCRIPTION", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_DESCRIPTION(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_DESCRIPTION"));  if (!yymatchString(yy, "<description>")) goto l46;  yyDo(yy, yy_1_OPEN_DESCRIPTION, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_DESCRIPTION", yy->__buf+yy->__pos));
  return 1;
  l46:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_DESCRIPTION", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_NAME(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_NAME"));  if (!yymatchString(yy, "</name>")) goto l47;  yyDo(yy, yy_1_CLOSE_NAME, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_NAME", yy->__buf+yy->__pos));
  return 1;
  l47:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_NAME", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_STRING_LITERAL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "STRING_LITERAL"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l48;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\005\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l48;
  l49:;	
  {  int yypos50= yy->__pos, yythunkpos50= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\005\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l50;  goto l49;
  l50:;	  yy->__pos= yypos50; yy->__thunkpos= yythunkpos50;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l48;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_STRING_LITERAL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "STRING_LITERAL", yy->__buf+yy->__pos));
  return 1;
  l48:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STRING_LITERAL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_NAME(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_NAME"));  if (!yymatchString(yy, "<name>")) goto l51;  yyDo(yy, yy_1_OPEN_NAME, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_NAME", yy->__buf+yy->__pos));
  return 1;
  l51:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_NAME", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_POINT_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_POINT_TAG"));
  l53:;	
  {  int yypos54= yy->__pos, yythunkpos54= yy->__thunkpos;  if (!yy_EOL(yy)) goto l54;  goto l53;
  l54:;	  yy->__pos= yypos54; yy->__thunkpos= yythunkpos54;
  }
  l55:;	
  {  int yypos56= yy->__pos, yythunkpos56= yy->__thunkpos;  if (!yy_WS(yy)) goto l56;  goto l55;
  l56:;	  yy->__pos= yypos56; yy->__thunkpos= yythunkpos56;
  }  if (!yy_OPEN_POINT(yy)) goto l52;
  l57:;	
  {  int yypos58= yy->__pos, yythunkpos58= yy->__thunkpos;  if (!yy_EOL(yy)) goto l58;  goto l57;
  l58:;	  yy->__pos= yypos58; yy->__thunkpos= yythunkpos58;
  }
  l59:;	
  {  int yypos60= yy->__pos, yythunkpos60= yy->__thunkpos;  if (!yy_WS(yy)) goto l60;  goto l59;
  l60:;	  yy->__pos= yypos60; yy->__thunkpos= yythunkpos60;
  }  if (!yy_COOR(yy)) goto l52;  yyDo(yy, yySet, -1, 0);
  l61:;	
  {  int yypos62= yy->__pos, yythunkpos62= yy->__thunkpos;  if (!yy_EOL(yy)) goto l62;  goto l61;
  l62:;	  yy->__pos= yypos62; yy->__thunkpos= yythunkpos62;
  }
  l63:;	
  {  int yypos64= yy->__pos, yythunkpos64= yy->__thunkpos;  if (!yy_WS(yy)) goto l64;  goto l63;
  l64:;	  yy->__pos= yypos64; yy->__thunkpos= yythunkpos64;
  }  if (!yy_CLOSE_POINT(yy)) goto l52;
  l65:;	
  {  int yypos66= yy->__pos, yythunkpos66= yy->__thunkpos;  if (!yy_EOL(yy)) goto l66;  goto l65;
  l66:;	  yy->__pos= yypos66; yy->__thunkpos= yythunkpos66;
  }
  l67:;	
  {  int yypos68= yy->__pos, yythunkpos68= yy->__thunkpos;  if (!yy_WS(yy)) goto l68;  goto l67;
  l68:;	  yy->__pos= yypos68; yy->__thunkpos= yythunkpos68;
  }  yyDo(yy, yy_1_FULL_POINT_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_POINT_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l52:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_POINT_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_DESCRIPTION_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_DESCRIPTION_TAG"));
  l70:;	
  {  int yypos71= yy->__pos, yythunkpos71= yy->__thunkpos;  if (!yy_EOL(yy)) goto l71;  goto l70;
  l71:;	  yy->__pos= yypos71; yy->__thunkpos= yythunkpos71;
  }
  l72:;	
  {  int yypos73= yy->__pos, yythunkpos73= yy->__thunkpos;  if (!yy_WS(yy)) goto l73;  goto l72;
  l73:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;
  }  if (!yy_OPEN_DESCRIPTION(yy)) goto l69;
  l74:;	
  {  int yypos75= yy->__pos, yythunkpos75= yy->__thunkpos;  if (!yy_EOL(yy)) goto l75;  goto l74;
  l75:;	  yy->__pos= yypos75; yy->__thunkpos= yythunkpos75;
  }
  l76:;	
  {  int yypos77= yy->__pos, yythunkpos77= yy->__thunkpos;  if (!yy_WS(yy)) goto l77;  goto l76;
  l77:;	  yy->__pos= yypos77; yy->__thunkpos= yythunkpos77;
  }  if (!yy_STRING_LITERAL(yy)) goto l69;  yyDo(yy, yySet, -1, 0);
  l78:;	
  {  int yypos79= yy->__pos, yythunkpos79= yy->__thunkpos;  if (!yy_EOL(yy)) goto l79;  goto l78;
  l79:;	  yy->__pos= yypos79; yy->__thunkpos= yythunkpos79;
  }
  l80:;	
  {  int yypos81= yy->__pos, yythunkpos81= yy->__thunkpos;  if (!yy_WS(yy)) goto l81;  goto l80;
  l81:;	  yy->__pos= yypos81; yy->__thunkpos= yythunkpos81;
  }  if (!yy_CLOSE_DESCRIPTION(yy)) goto l69;
  l82:;	
  {  int yypos83= yy->__pos, yythunkpos83= yy->__thunkpos;  if (!yy_EOL(yy)) goto l83;  goto l82;
  l83:;	  yy->__pos= yypos83; yy->__thunkpos= yythunkpos83;
  }
  l84:;	
  {  int yypos85= yy->__pos, yythunkpos85= yy->__thunkpos;  if (!yy_WS(yy)) goto l85;  goto l84;
  l85:;	  yy->__pos= yypos85; yy->__thunkpos= yythunkpos85;
  }  yyDo(yy, yy_1_FULL_DESCRIPTION_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_DESCRIPTION_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l69:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_DESCRIPTION_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_NAME_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_NAME_TAG"));
  l87:;	
  {  int yypos88= yy->__pos, yythunkpos88= yy->__thunkpos;  if (!yy_EOL(yy)) goto l88;  goto l87;
  l88:;	  yy->__pos= yypos88; yy->__thunkpos= yythunkpos88;
  }
  l89:;	
  {  int yypos90= yy->__pos, yythunkpos90= yy->__thunkpos;  if (!yy_WS(yy)) goto l90;  goto l89;
  l90:;	  yy->__pos= yypos90; yy->__thunkpos= yythunkpos90;
  }  if (!yy_OPEN_NAME(yy)) goto l86;
  l91:;	
  {  int yypos92= yy->__pos, yythunkpos92= yy->__thunkpos;  if (!yy_EOL(yy)) goto l92;  goto l91;
  l92:;	  yy->__pos= yypos92; yy->__thunkpos= yythunkpos92;
  }
  l93:;	
  {  int yypos94= yy->__pos, yythunkpos94= yy->__thunkpos;  if (!yy_WS(yy)) goto l94;  goto l93;
  l94:;	  yy->__pos= yypos94; yy->__thunkpos= yythunkpos94;
  }  if (!yy_STRING_LITERAL(yy)) goto l86;  yyDo(yy, yySet, -1, 0);
  l95:;	
  {  int yypos96= yy->__pos, yythunkpos96= yy->__thunkpos;  if (!yy_EOL(yy)) goto l96;  goto l95;
  l96:;	  yy->__pos= yypos96; yy->__thunkpos= yythunkpos96;
  }
  l97:;	
  {  int yypos98= yy->__pos, yythunkpos98= yy->__thunkpos;  if (!yy_WS(yy)) goto l98;  goto l97;
  l98:;	  yy->__pos= yypos98; yy->__thunkpos= yythunkpos98;
  }  if (!yy_CLOSE_NAME(yy)) goto l86;
  l99:;	
  {  int yypos100= yy->__pos, yythunkpos100= yy->__thunkpos;  if (!yy_EOL(yy)) goto l100;  goto l99;
  l100:;	  yy->__pos= yypos100; yy->__thunkpos= yythunkpos100;
  }
  l101:;	
  {  int yypos102= yy->__pos, yythunkpos102= yy->__thunkpos;  if (!yy_WS(yy)) goto l102;  goto l101;
  l102:;	  yy->__pos= yypos102; yy->__thunkpos= yythunkpos102;
  }  yyDo(yy, yy_1_FULL_NAME_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_NAME_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l86:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_NAME_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_MINOR_TAGS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "MINOR_TAGS"));
  {  int yypos104= yy->__pos, yythunkpos104= yy->__thunkpos;  if (!yy_FULL_NAME_TAG(yy)) goto l105;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_1_MINOR_TAGS, yy->__begin, yy->__end);  goto l104;
  l105:;	  yy->__pos= yypos104; yy->__thunkpos= yythunkpos104;  if (!yy_FULL_DESCRIPTION_TAG(yy)) goto l106;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_2_MINOR_TAGS, yy->__begin, yy->__end);  goto l104;
  l106:;	  yy->__pos= yypos104; yy->__thunkpos= yythunkpos104;  if (!yy_FULL_POINT_TAG(yy)) goto l103;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_3_MINOR_TAGS, yy->__begin, yy->__end);
  }
  l104:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "MINOR_TAGS", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l103:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "MINOR_TAGS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_LINESTRING(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_LINESTRING"));  if (!yymatchString(yy, "</LineString>")) goto l107;  yyDo(yy, yy_1_CLOSE_LINESTRING, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_LINESTRING", yy->__buf+yy->__pos));
  return 1;
  l107:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_LINESTRING", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_COORDINATES_LIST(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "COORDINATES_LIST"));
  l109:;	
  {  int yypos110= yy->__pos, yythunkpos110= yy->__thunkpos;  if (!yy_EOL(yy)) goto l110;  goto l109;
  l110:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;
  }
  l111:;	
  {  int yypos112= yy->__pos, yythunkpos112= yy->__thunkpos;  if (!yy_WS(yy)) goto l112;  goto l111;
  l112:;	  yy->__pos= yypos112; yy->__thunkpos= yythunkpos112;
  }  if (!yy_OPEN_COORDINATE(yy)) goto l108;
  l113:;	
  {  int yypos114= yy->__pos, yythunkpos114= yy->__thunkpos;  if (!yy_EOL(yy)) goto l114;  goto l113;
  l114:;	  yy->__pos= yypos114; yy->__thunkpos= yythunkpos114;
  }
  l115:;	
  {  int yypos116= yy->__pos, yythunkpos116= yy->__thunkpos;  if (!yy_WS(yy)) goto l116;  goto l115;
  l116:;	  yy->__pos= yypos116; yy->__thunkpos= yythunkpos116;
  }  if (!yy_SINGLECOR(yy)) goto l108;  yyDo(yy, yySet, -1, 0);
  l117:;	
  {  int yypos118= yy->__pos, yythunkpos118= yy->__thunkpos;  if (!yy_SINGLECOR(yy)) goto l118;  yyDo(yy, yySet, -1, 0);  goto l117;
  l118:;	  yy->__pos= yypos118; yy->__thunkpos= yythunkpos118;
  }
  l119:;	
  {  int yypos120= yy->__pos, yythunkpos120= yy->__thunkpos;  if (!yy_EOL(yy)) goto l120;  goto l119;
  l120:;	  yy->__pos= yypos120; yy->__thunkpos= yythunkpos120;
  }
  l121:;	
  {  int yypos122= yy->__pos, yythunkpos122= yy->__thunkpos;  if (!yy_WS(yy)) goto l122;  goto l121;
  l122:;	  yy->__pos= yypos122; yy->__thunkpos= yythunkpos122;
  }  if (!yy_CLOSE_COORDINATE(yy)) goto l108;
  l123:;	
  {  int yypos124= yy->__pos, yythunkpos124= yy->__thunkpos;  if (!yy_EOL(yy)) goto l124;  goto l123;
  l124:;	  yy->__pos= yypos124; yy->__thunkpos= yythunkpos124;
  }
  l125:;	
  {  int yypos126= yy->__pos, yythunkpos126= yy->__thunkpos;  if (!yy_WS(yy)) goto l126;  goto l125;
  l126:;	  yy->__pos= yypos126; yy->__thunkpos= yythunkpos126;
  }  yyDo(yy, yy_1_COORDINATES_LIST, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "COORDINATES_LIST", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l108:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COORDINATES_LIST", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_LINESTRING(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_LINESTRING"));  if (!yymatchString(yy, "<LineString>")) goto l127;  yyDo(yy, yy_1_OPEN_LINESTRING, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_LINESTRING", yy->__buf+yy->__pos));
  return 1;
  l127:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_LINESTRING", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_PLACEMARKER(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_PLACEMARKER"));  if (!yymatchString(yy, "</Placemarker>")) goto l128;  yyDo(yy, yy_1_CLOSE_PLACEMARKER, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_PLACEMARKER", yy->__buf+yy->__pos));
  return 1;
  l128:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_PLACEMARKER", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_DESCRIPTORS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "DESCRIPTORS"));  if (!yy_MINOR_TAGS(yy)) goto l129;  yyDo(yy, yySet, -1, 0);
  l130:;	
  {  int yypos131= yy->__pos, yythunkpos131= yy->__thunkpos;  if (!yy_MINOR_TAGS(yy)) goto l131;  yyDo(yy, yySet, -1, 0);  goto l130;
  l131:;	  yy->__pos= yypos131; yy->__thunkpos= yythunkpos131;
  }  yyDo(yy, yy_1_DESCRIPTORS, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "DESCRIPTORS", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l129:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DESCRIPTORS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_PLACEMARKER(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_PLACEMARKER"));  if (!yymatchString(yy, "<Placemarker>")) goto l132;  yyDo(yy, yy_1_OPEN_PLACEMARKER, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_PLACEMARKER", yy->__buf+yy->__pos));
  return 1;
  l132:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_PLACEMARKER", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_LINESTRING_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_LINESTRING_TAG"));
  l134:;	
  {  int yypos135= yy->__pos, yythunkpos135= yy->__thunkpos;  if (!yy_EOL(yy)) goto l135;  goto l134;
  l135:;	  yy->__pos= yypos135; yy->__thunkpos= yythunkpos135;
  }
  l136:;	
  {  int yypos137= yy->__pos, yythunkpos137= yy->__thunkpos;  if (!yy_WS(yy)) goto l137;  goto l136;
  l137:;	  yy->__pos= yypos137; yy->__thunkpos= yythunkpos137;
  }  if (!yy_OPEN_LINESTRING(yy)) goto l133;
  l138:;	
  {  int yypos139= yy->__pos, yythunkpos139= yy->__thunkpos;  if (!yy_EOL(yy)) goto l139;  goto l138;
  l139:;	  yy->__pos= yypos139; yy->__thunkpos= yythunkpos139;
  }
  l140:;	
  {  int yypos141= yy->__pos, yythunkpos141= yy->__thunkpos;  if (!yy_WS(yy)) goto l141;  goto l140;
  l141:;	  yy->__pos= yypos141; yy->__thunkpos= yythunkpos141;
  }  if (!yy_COORDINATES_LIST(yy)) goto l133;  yyDo(yy, yySet, -1, 0);
  l142:;	
  {  int yypos143= yy->__pos, yythunkpos143= yy->__thunkpos;  if (!yy_EOL(yy)) goto l143;  goto l142;
  l143:;	  yy->__pos= yypos143; yy->__thunkpos= yythunkpos143;
  }
  l144:;	
  {  int yypos145= yy->__pos, yythunkpos145= yy->__thunkpos;  if (!yy_WS(yy)) goto l145;  goto l144;
  l145:;	  yy->__pos= yypos145; yy->__thunkpos= yythunkpos145;
  }  if (!yy_CLOSE_LINESTRING(yy)) goto l133;
  l146:;	
  {  int yypos147= yy->__pos, yythunkpos147= yy->__thunkpos;  if (!yy_EOL(yy)) goto l147;  goto l146;
  l147:;	  yy->__pos= yypos147; yy->__thunkpos= yythunkpos147;
  }
  l148:;	
  {  int yypos149= yy->__pos, yythunkpos149= yy->__thunkpos;  if (!yy_WS(yy)) goto l149;  goto l148;
  l149:;	  yy->__pos= yypos149; yy->__thunkpos= yythunkpos149;
  }  yyDo(yy, yy_1_FULL_LINESTRING_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_LINESTRING_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l133:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_LINESTRING_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_PLACEMARKER_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_PLACEMARKER_TAG"));
  l151:;	
  {  int yypos152= yy->__pos, yythunkpos152= yy->__thunkpos;  if (!yy_EOL(yy)) goto l152;  goto l151;
  l152:;	  yy->__pos= yypos152; yy->__thunkpos= yythunkpos152;
  }
  l153:;	
  {  int yypos154= yy->__pos, yythunkpos154= yy->__thunkpos;  if (!yy_WS(yy)) goto l154;  goto l153;
  l154:;	  yy->__pos= yypos154; yy->__thunkpos= yythunkpos154;
  }  if (!yy_OPEN_PLACEMARKER(yy)) goto l150;
  l155:;	
  {  int yypos156= yy->__pos, yythunkpos156= yy->__thunkpos;  if (!yy_EOL(yy)) goto l156;  goto l155;
  l156:;	  yy->__pos= yypos156; yy->__thunkpos= yythunkpos156;
  }
  l157:;	
  {  int yypos158= yy->__pos, yythunkpos158= yy->__thunkpos;  if (!yy_WS(yy)) goto l158;  goto l157;
  l158:;	  yy->__pos= yypos158; yy->__thunkpos= yythunkpos158;
  }  if (!yy_DESCRIPTORS(yy)) goto l150;  yyDo(yy, yySet, -1, 0);
  l159:;	
  {  int yypos160= yy->__pos, yythunkpos160= yy->__thunkpos;  if (!yy_DESCRIPTORS(yy)) goto l160;  yyDo(yy, yySet, -1, 0);  goto l159;
  l160:;	  yy->__pos= yypos160; yy->__thunkpos= yythunkpos160;
  }
  l161:;	
  {  int yypos162= yy->__pos, yythunkpos162= yy->__thunkpos;  if (!yy_EOL(yy)) goto l162;  goto l161;
  l162:;	  yy->__pos= yypos162; yy->__thunkpos= yythunkpos162;
  }
  l163:;	
  {  int yypos164= yy->__pos, yythunkpos164= yy->__thunkpos;  if (!yy_WS(yy)) goto l164;  goto l163;
  l164:;	  yy->__pos= yypos164; yy->__thunkpos= yythunkpos164;
  }  if (!yy_CLOSE_PLACEMARKER(yy)) goto l150;
  l165:;	
  {  int yypos166= yy->__pos, yythunkpos166= yy->__thunkpos;  if (!yy_EOL(yy)) goto l166;  goto l165;
  l166:;	  yy->__pos= yypos166; yy->__thunkpos= yythunkpos166;
  }
  l167:;	
  {  int yypos168= yy->__pos, yythunkpos168= yy->__thunkpos;  if (!yy_WS(yy)) goto l168;  goto l167;
  l168:;	  yy->__pos= yypos168; yy->__thunkpos= yythunkpos168;
  }  yyDo(yy, yy_1_FULL_PLACEMARKER_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_PLACEMARKER_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l150:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_PLACEMARKER_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_DOCUMENT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_DOCUMENT"));  if (!yymatchString(yy, "</Document>")) goto l169;  yyDo(yy, yy_1_CLOSE_DOCUMENT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_DOCUMENT", yy->__buf+yy->__pos));
  return 1;
  l169:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_DOCUMENT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_MAJOR_TAGS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "MAJOR_TAGS"));
  {  int yypos171= yy->__pos, yythunkpos171= yy->__thunkpos;  if (!yy_FULL_PLACEMARKER_TAG(yy)) goto l172;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_MAJOR_TAGS, yy->__begin, yy->__end);  goto l171;
  l172:;	  yy->__pos= yypos171; yy->__thunkpos= yythunkpos171;  if (!yy_FULL_LINESTRING_TAG(yy)) goto l170;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_MAJOR_TAGS, yy->__begin, yy->__end);
  }
  l171:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "MAJOR_TAGS", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l170:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "MAJOR_TAGS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_DOCUMENT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_DOCUMENT"));  if (!yymatchString(yy, "<Document>")) goto l173;  yyDo(yy, yy_1_OPEN_DOCUMENT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_DOCUMENT", yy->__buf+yy->__pos));
  return 1;
  l173:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_DOCUMENT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_KML(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_KML"));  if (!yymatchString(yy, "</Kml>")) goto l174;  yyDo(yy, yy_1_CLOSE_KML, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_KML", yy->__buf+yy->__pos));
  return 1;
  l174:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_KML", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_DOCUMENT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "DOCUMENT"));
  {  int yypos176= yy->__pos, yythunkpos176= yy->__thunkpos;
  l178:;	
  {  int yypos179= yy->__pos, yythunkpos179= yy->__thunkpos;  if (!yy_EOL(yy)) goto l179;  goto l178;
  l179:;	  yy->__pos= yypos179; yy->__thunkpos= yythunkpos179;
  }
  l180:;	
  {  int yypos181= yy->__pos, yythunkpos181= yy->__thunkpos;  if (!yy_WS(yy)) goto l181;  goto l180;
  l181:;	  yy->__pos= yypos181; yy->__thunkpos= yythunkpos181;
  }  if (!yy_OPEN_DOCUMENT(yy)) goto l177;
  l182:;	
  {  int yypos183= yy->__pos, yythunkpos183= yy->__thunkpos;  if (!yy_EOL(yy)) goto l183;  goto l182;
  l183:;	  yy->__pos= yypos183; yy->__thunkpos= yythunkpos183;
  }
  l184:;	
  {  int yypos185= yy->__pos, yythunkpos185= yy->__thunkpos;  if (!yy_WS(yy)) goto l185;  goto l184;
  l185:;	  yy->__pos= yypos185; yy->__thunkpos= yythunkpos185;
  }  if (!yy_MAJOR_TAGS(yy)) goto l177;  yyDo(yy, yySet, -1, 0);
  l186:;	
  {  int yypos187= yy->__pos, yythunkpos187= yy->__thunkpos;  if (!yy_MAJOR_TAGS(yy)) goto l187;  yyDo(yy, yySet, -1, 0);  goto l186;
  l187:;	  yy->__pos= yypos187; yy->__thunkpos= yythunkpos187;
  }
  l188:;	
  {  int yypos189= yy->__pos, yythunkpos189= yy->__thunkpos;  if (!yy_EOL(yy)) goto l189;  goto l188;
  l189:;	  yy->__pos= yypos189; yy->__thunkpos= yythunkpos189;
  }
  l190:;	
  {  int yypos191= yy->__pos, yythunkpos191= yy->__thunkpos;  if (!yy_WS(yy)) goto l191;  goto l190;
  l191:;	  yy->__pos= yypos191; yy->__thunkpos= yythunkpos191;
  }  if (!yy_CLOSE_DOCUMENT(yy)) goto l177;
  l192:;	
  {  int yypos193= yy->__pos, yythunkpos193= yy->__thunkpos;  if (!yy_EOL(yy)) goto l193;  goto l192;
  l193:;	  yy->__pos= yypos193; yy->__thunkpos= yythunkpos193;
  }
  l194:;	
  {  int yypos195= yy->__pos, yythunkpos195= yy->__thunkpos;  if (!yy_WS(yy)) goto l195;  goto l194;
  l195:;	  yy->__pos= yypos195; yy->__thunkpos= yythunkpos195;
  }  yyDo(yy, yy_1_DOCUMENT, yy->__begin, yy->__end);  goto l176;
  l177:;	  yy->__pos= yypos176; yy->__thunkpos= yythunkpos176;
  l196:;	
  {  int yypos197= yy->__pos, yythunkpos197= yy->__thunkpos;  if (!yy_EOL(yy)) goto l197;  goto l196;
  l197:;	  yy->__pos= yypos197; yy->__thunkpos= yythunkpos197;
  }
  l198:;	
  {  int yypos199= yy->__pos, yythunkpos199= yy->__thunkpos;  if (!yy_WS(yy)) goto l199;  goto l198;
  l199:;	  yy->__pos= yypos199; yy->__thunkpos= yythunkpos199;
  }  if (!yy_OPEN_DOCUMENT(yy)) goto l175;
  l200:;	
  {  int yypos201= yy->__pos, yythunkpos201= yy->__thunkpos;  if (!yy_EOL(yy)) goto l201;  goto l200;
  l201:;	  yy->__pos= yypos201; yy->__thunkpos= yythunkpos201;
  }
  l202:;	
  {  int yypos203= yy->__pos, yythunkpos203= yy->__thunkpos;  if (!yy_WS(yy)) goto l203;  goto l202;
  l203:;	  yy->__pos= yypos203; yy->__thunkpos= yythunkpos203;
  }  if (!yy_CLOSE_DOCUMENT(yy)) goto l175;
  l204:;	
  {  int yypos205= yy->__pos, yythunkpos205= yy->__thunkpos;  if (!yy_EOL(yy)) goto l205;  goto l204;
  l205:;	  yy->__pos= yypos205; yy->__thunkpos= yythunkpos205;
  }
  l206:;	
  {  int yypos207= yy->__pos, yythunkpos207= yy->__thunkpos;  if (!yy_WS(yy)) goto l207;  goto l206;
  l207:;	  yy->__pos= yypos207; yy->__thunkpos= yythunkpos207;
  }  yyDo(yy, yy_2_DOCUMENT, yy->__begin, yy->__end);
  }
  l176:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "DOCUMENT", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l175:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DOCUMENT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_KML(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_KML"));  if (!yymatchString(yy, "<Kml>")) goto l208;  yyDo(yy, yy_1_OPEN_KML, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_KML", yy->__buf+yy->__pos));
  return 1;
  l208:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_KML", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_WS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "WS"));  if (!yymatchClass(yy, (unsigned char *)"\000\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l209;  yyDo(yy, yy_1_WS, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "WS", yy->__buf+yy->__pos));
  return 1;
  l209:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "WS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EOL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOL"));
  {  int yypos211= yy->__pos, yythunkpos211= yy->__thunkpos;  if (!yymatchChar(yy, '\r')) goto l211;  goto l212;
  l211:;	  yy->__pos= yypos211; yy->__thunkpos= yythunkpos211;
  }
  l212:;	  if (!yymatchChar(yy, '\n')) goto l210;  yyDo(yy, yy_1_EOL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 1;
  l210:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_KML_DOC(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "KML_DOC"));
  l214:;	
  {  int yypos215= yy->__pos, yythunkpos215= yy->__thunkpos;  if (!yy_EOL(yy)) goto l215;  goto l214;
  l215:;	  yy->__pos= yypos215; yy->__thunkpos= yythunkpos215;
  }
  l216:;	
  {  int yypos217= yy->__pos, yythunkpos217= yy->__thunkpos;  if (!yy_WS(yy)) goto l217;  goto l216;
  l217:;	  yy->__pos= yypos217; yy->__thunkpos= yythunkpos217;
  }  if (!yy_OPEN_KML(yy)) goto l213;
  l218:;	
  {  int yypos219= yy->__pos, yythunkpos219= yy->__thunkpos;  if (!yy_EOL(yy)) goto l219;  goto l218;
  l219:;	  yy->__pos= yypos219; yy->__thunkpos= yythunkpos219;
  }
  l220:;	
  {  int yypos221= yy->__pos, yythunkpos221= yy->__thunkpos;  if (!yy_WS(yy)) goto l221;  goto l220;
  l221:;	  yy->__pos= yypos221; yy->__thunkpos= yythunkpos221;
  }  if (!yy_DOCUMENT(yy)) goto l213;  yyDo(yy, yySet, -1, 0);
  l222:;	
  {  int yypos223= yy->__pos, yythunkpos223= yy->__thunkpos;  if (!yy_EOL(yy)) goto l223;  goto l222;
  l223:;	  yy->__pos= yypos223; yy->__thunkpos= yythunkpos223;
  }
  l224:;	
  {  int yypos225= yy->__pos, yythunkpos225= yy->__thunkpos;  if (!yy_WS(yy)) goto l225;  goto l224;
  l225:;	  yy->__pos= yypos225; yy->__thunkpos= yythunkpos225;
  }  if (!yy_CLOSE_KML(yy)) goto l213;
  l226:;	
  {  int yypos227= yy->__pos, yythunkpos227= yy->__thunkpos;  if (!yy_EOL(yy)) goto l227;  goto l226;
  l227:;	  yy->__pos= yypos227; yy->__thunkpos= yythunkpos227;
  }
  l228:;	
  {  int yypos229= yy->__pos, yythunkpos229= yy->__thunkpos;  if (!yy_WS(yy)) goto l229;  goto l228;
  l229:;	  yy->__pos= yypos229; yy->__thunkpos= yythunkpos229;
  }  yyDo(yy, yy_1_KML_DOC, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "KML_DOC", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l213:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "KML_DOC", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_PROGRAM(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "PROGRAM"));  if (!yy_KML_DOC(yy)) goto l230;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_1_PROGRAM, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "PROGRAM", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l230:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "PROGRAM", yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_PROGRAM);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}

#endif
#line 306 "kml.leg"


int main()
{
    while (yyparse()){
    }
    if (!! program) {
    //program->print(std::cout);
    GeneratorPtr gen = generator(program);
    gen->generate(std::cout);
  } else {
    std::cout << "syntax error." << std::endl;
  }
  return 0;
    return 0;
}
