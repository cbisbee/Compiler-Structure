/* A recursive-descent parser generated by peg 0.1.18 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 34
#line 1 "kml.leg"

           #include <stdio.h>     /* printf() */
           #include <stdlib.h>    /* atoi() */
           #include <vector>
           #include "KML.h"
           #include <iostream>
           int vars[26];
           int i = 0;
           NodePtr program(0);
           

#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      long offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_COMMA_DELIMETER(yycontext *yy); /* 34 */
YY_RULE(int) yy_NUMBER_LITERAL(yycontext *yy); /* 33 */
YY_RULE(int) yy_SINGLECOR(yycontext *yy); /* 32 */
YY_RULE(int) yy_CLOSE_POINT(yycontext *yy); /* 31 */
YY_RULE(int) yy_OPEN_POINT(yycontext *yy); /* 30 */
YY_RULE(int) yy_CLOSE_DESCRIPTION(yycontext *yy); /* 29 */
YY_RULE(int) yy_OPEN_DESCRIPTION(yycontext *yy); /* 28 */
YY_RULE(int) yy_CLOSE_NAME(yycontext *yy); /* 27 */
YY_RULE(int) yy_STRING_LITERAL(yycontext *yy); /* 26 */
YY_RULE(int) yy_OPEN_NAME(yycontext *yy); /* 25 */
YY_RULE(int) yy_FULL_POINT_TAG(yycontext *yy); /* 24 */
YY_RULE(int) yy_FULL_DESCRIPTION_TAG(yycontext *yy); /* 23 */
YY_RULE(int) yy_FULL_NAME_TAG(yycontext *yy); /* 22 */
YY_RULE(int) yy_MINOR_TAGS(yycontext *yy); /* 21 */
YY_RULE(int) yy_CLOSE_LINESTRING(yycontext *yy); /* 20 */
YY_RULE(int) yy_CLOSE_COORDINATE(yycontext *yy); /* 19 */
YY_RULE(int) yy_COORDINATES_LIST(yycontext *yy); /* 18 */
YY_RULE(int) yy_OPEN_COORDINATE(yycontext *yy); /* 17 */
YY_RULE(int) yy_OPEN_LINESTRING(yycontext *yy); /* 16 */
YY_RULE(int) yy_CLOSE_PLACEMARKER(yycontext *yy); /* 15 */
YY_RULE(int) yy_DESCRIPTORS(yycontext *yy); /* 14 */
YY_RULE(int) yy_OPEN_PLACEMARKER(yycontext *yy); /* 13 */
YY_RULE(int) yy_FULL_LINESTRING_TAG(yycontext *yy); /* 12 */
YY_RULE(int) yy_FULL_PLACEMARKER_TAG(yycontext *yy); /* 11 */
YY_RULE(int) yy_CLOSE_DOCUMENT(yycontext *yy); /* 10 */
YY_RULE(int) yy_MAJOR_TAGS(yycontext *yy); /* 9 */
YY_RULE(int) yy_OPEN_DOCUMENT(yycontext *yy); /* 8 */
YY_RULE(int) yy_CLOSE_KML(yycontext *yy); /* 7 */
YY_RULE(int) yy_DOCUMENT(yycontext *yy); /* 6 */
YY_RULE(int) yy_WS(yycontext *yy); /* 5 */
YY_RULE(int) yy_EOL(yycontext *yy); /* 4 */
YY_RULE(int) yy_OPEN_KML(yycontext *yy); /* 3 */
YY_RULE(int) yy_KML_DOC(yycontext *yy); /* 2 */
YY_RULE(int) yy_PROGRAM(yycontext *yy); /* 1 */

YY_ACTION(void) yy_1_STRING_LITERAL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_STRING_LITERAL\n"));
  {
#line 96
  __ = NodePtr(new StringLiteralNode(yytext)); printf("STRING-LITERAL %s\n",yytext);;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_NUMBER_LITERAL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_NUMBER_LITERAL\n"));
  {
#line 95
  __ = NodePtr(new NumberLiteralNode(atoi(yytext))); printf("NUMBER-LITERAL %d\n",atoi(yytext));;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_EOL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_EOL\n"));
  {
#line 94
  printf("EOL\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_WS(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_WS\n"));
  {
#line 93
  printf("WS\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_COMMA_DELIMETER(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_COMMA_DELIMETER\n"));
  {
#line 92
  printf("COMMA-DELIMETER\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_COORDINATE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_COORDINATE\n"));
  {
#line 90
  printf("CLOSE-COORDINATE\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_COORDINATE(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_COORDINATE\n"));
  {
#line 89
  printf("OPEN-COORDINATE\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_POINT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_POINT\n"));
  {
#line 88
  printf("CLOSE-POINT\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_POINT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_POINT\n"));
  {
#line 87
  printf("OPEN-POINT\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_DESCRIPTION(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_DESCRIPTION\n"));
  {
#line 86
  printf("CLOSE-DESCRIPTION\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_DESCRIPTION(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_DESCRIPTION\n"));
  {
#line 85
  printf("OPEN-DESCRIPTION\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_NAME(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_NAME\n"));
  {
#line 84
  printf("CLOSE-NAME\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_NAME(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_NAME\n"));
  {
#line 83
  printf("OPEN-NAME\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_PLACEMARKER(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_PLACEMARKER\n"));
  {
#line 82
  printf("CLOSE-PLACEMARKER\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_PLACEMARKER(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_PLACEMARKER\n"));
  {
#line 81
  printf("OPEN-PLACEMARKER\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_LINESTRING(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_LINESTRING\n"));
  {
#line 80
  printf("CLOSE-LINESTRING\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_LINESTRING(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_LINESTRING\n"));
  {
#line 79
  printf("OPEN-LINESTRING\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_DOCUMENT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_DOCUMENT\n"));
  {
#line 78
  printf("CLOSE-DOCUMENT\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_DOCUMENT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_DOCUMENT\n"));
  {
#line 77
  printf("OPEN-DOCUMENT\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CLOSE_KML(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CLOSE_KML\n"));
  {
#line 76
  printf("CLOSE-KML\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OPEN_KML(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OPEN_KML\n"));
  {
#line 75
  printf("OPEN-KML\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_SINGLECOR(yycontext *yy, char *yytext, int yyleng)
{
#define num3 yy->__val[-1]
#define num2 yy->__val[-2]
#define num1 yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_SINGLECOR\n"));
  {
#line 70
  __ = NodePtr(new CoordinateNode(num1,num2,num3));;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef num3
#undef num2
#undef num1
}
YY_ACTION(void) yy_1_COORDINATES_LIST(yycontext *yy, char *yytext, int yyleng)
{
#define cor yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_COORDINATES_LIST\n"));
  {
#line 66
  __ = NodePtr(new CoordinateListNode()); __->children.push_back(cor);;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef cor
}
YY_ACTION(void) yy_1_FULL_POINT_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define corList yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_POINT_TAG\n"));
  {
#line 62
  __ = NodePtr(new PointNode(corList));;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef corList
}
YY_ACTION(void) yy_1_FULL_DESCRIPTION_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define descr yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_DESCRIPTION_TAG\n"));
  {
#line 58
   __ = NodePtr(new DescriptionNode(descr));;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef descr
}
YY_ACTION(void) yy_1_FULL_NAME_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define name yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_NAME_TAG\n"));
  {
#line 54
   __ = NodePtr(new NameNode(name)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef name
}
YY_ACTION(void) yy_3_MINOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define point yy->__val[-1]
#define description yy->__val[-2]
#define name yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_MINOR_TAGS\n"));
  {
#line 50
  __ = point;;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef point
#undef description
#undef name
}
YY_ACTION(void) yy_2_MINOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define point yy->__val[-1]
#define description yy->__val[-2]
#define name yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_MINOR_TAGS\n"));
  {
#line 48
  __ = description;;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef point
#undef description
#undef name
}
YY_ACTION(void) yy_1_MINOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define point yy->__val[-1]
#define description yy->__val[-2]
#define name yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_MINOR_TAGS\n"));
  {
#line 46
  __ = name;;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef point
#undef description
#undef name
}
YY_ACTION(void) yy_1_DESCRIPTORS(yycontext *yy, char *yytext, int yyleng)
{
#define minortag yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_DESCRIPTORS\n"));
  {
#line 42
  __ = NodePtr(new DescriptorsNode()); __->children.push_back(minortag);;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef minortag
}
YY_ACTION(void) yy_1_FULL_LINESTRING_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define corList yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_LINESTRING_TAG\n"));
  {
#line 38
  __ = NodePtr(new LineStringNode(corList));;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef corList
}
YY_ACTION(void) yy_1_FULL_PLACEMARKER_TAG(yycontext *yy, char *yytext, int yyleng)
{
#define descriptors yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_FULL_PLACEMARKER_TAG\n"));
  {
#line 34
   __ = NodePtr(new PlacemarkerNode(descriptors)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef descriptors
}
YY_ACTION(void) yy_2_MAJOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define linestring yy->__val[-1]
#define placemarker yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_MAJOR_TAGS\n"));
  {
#line 30
  __ = linestring;;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef linestring
#undef placemarker
}
YY_ACTION(void) yy_1_MAJOR_TAGS(yycontext *yy, char *yytext, int yyleng)
{
#define linestring yy->__val[-1]
#define placemarker yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_MAJOR_TAGS\n"));
  {
#line 28
  __ = placemarker;;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef linestring
#undef placemarker
}
YY_ACTION(void) yy_2_DOCUMENT(yycontext *yy, char *yytext, int yyleng)
{
#define majortag yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_DOCUMENT\n"));
  {
#line 24
  __ = NodePtr(new DocumentNode());;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef majortag
}
YY_ACTION(void) yy_1_DOCUMENT(yycontext *yy, char *yytext, int yyleng)
{
#define majortag yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_DOCUMENT\n"));
  {
#line 22
  __ = NodePtr(new DocumentNode()); __->children.push_back(majortag);;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef majortag
}
YY_ACTION(void) yy_1_KML_DOC(yycontext *yy, char *yytext, int yyleng)
{
#define doc yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_KML_DOC\n"));
  {
#line 18
  __ = NodePtr(new KMLNode(doc)); //expecting a document node as param;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef doc
}
YY_ACTION(void) yy_1_PROGRAM(yycontext *yy, char *yytext, int yyleng)
{
#define kml yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_PROGRAM\n"));
  {
#line 14
  program = kml; printf("Valid Doc!\n");;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef kml
}

YY_RULE(int) yy_COMMA_DELIMETER(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "COMMA_DELIMETER"));  if (!yymatchChar(yy, ',')) goto l1;  yyDo(yy, yy_1_COMMA_DELIMETER, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "COMMA_DELIMETER", yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COMMA_DELIMETER", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_NUMBER_LITERAL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "NUMBER_LITERAL"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l2;
#undef yytext
#undef yyleng
  }
  {  int yypos3= yy->__pos, yythunkpos3= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\010\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l3;  goto l4;
  l3:;	  yy->__pos= yypos3; yy->__thunkpos= yythunkpos3;
  }
  l4:;	  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l2;
  l5:;	
  {  int yypos6= yy->__pos, yythunkpos6= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l6;  goto l5;
  l6:;	  yy->__pos= yypos6; yy->__thunkpos= yythunkpos6;
  }
  {  int yypos7= yy->__pos, yythunkpos7= yy->__thunkpos;  if (!yymatchChar(yy, '.')) goto l7;  goto l8;
  l7:;	  yy->__pos= yypos7; yy->__thunkpos= yythunkpos7;
  }
  l8:;	
  {  int yypos9= yy->__pos, yythunkpos9= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l9;
  l11:;	
  {  int yypos12= yy->__pos, yythunkpos12= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l12;  goto l11;
  l12:;	  yy->__pos= yypos12; yy->__thunkpos= yythunkpos12;
  }  goto l10;
  l9:;	  yy->__pos= yypos9; yy->__thunkpos= yythunkpos9;
  }
  l10:;	  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l2;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_NUMBER_LITERAL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "NUMBER_LITERAL", yy->__buf+yy->__pos));
  return 1;
  l2:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NUMBER_LITERAL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_SINGLECOR(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "SINGLECOR"));  if (!yy_NUMBER_LITERAL(yy)) goto l13;  yyDo(yy, yySet, -3, 0);  if (!yy_COMMA_DELIMETER(yy)) goto l13;  if (!yy_NUMBER_LITERAL(yy)) goto l13;  yyDo(yy, yySet, -2, 0);  if (!yy_COMMA_DELIMETER(yy)) goto l13;  if (!yy_NUMBER_LITERAL(yy)) goto l13;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_1_SINGLECOR, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "SINGLECOR", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l13:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SINGLECOR", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_POINT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_POINT"));  if (!yymatchString(yy, "</Point>")) goto l14;  yyDo(yy, yy_1_CLOSE_POINT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_POINT", yy->__buf+yy->__pos));
  return 1;
  l14:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_POINT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_POINT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_POINT"));  if (!yymatchString(yy, "<Point>")) goto l15;  yyDo(yy, yy_1_OPEN_POINT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_POINT", yy->__buf+yy->__pos));
  return 1;
  l15:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_POINT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_DESCRIPTION(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_DESCRIPTION"));  if (!yymatchString(yy, "</description>")) goto l16;  yyDo(yy, yy_1_CLOSE_DESCRIPTION, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_DESCRIPTION", yy->__buf+yy->__pos));
  return 1;
  l16:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_DESCRIPTION", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_DESCRIPTION(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_DESCRIPTION"));  if (!yymatchString(yy, "<description>")) goto l17;  yyDo(yy, yy_1_OPEN_DESCRIPTION, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_DESCRIPTION", yy->__buf+yy->__pos));
  return 1;
  l17:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_DESCRIPTION", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_NAME(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_NAME"));  if (!yymatchString(yy, "</name>")) goto l18;  yyDo(yy, yy_1_CLOSE_NAME, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_NAME", yy->__buf+yy->__pos));
  return 1;
  l18:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_NAME", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_STRING_LITERAL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "STRING_LITERAL"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l19;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\005\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l19;
  l20:;	
  {  int yypos21= yy->__pos, yythunkpos21= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\005\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l21;  goto l20;
  l21:;	  yy->__pos= yypos21; yy->__thunkpos= yythunkpos21;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l19;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_STRING_LITERAL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "STRING_LITERAL", yy->__buf+yy->__pos));
  return 1;
  l19:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STRING_LITERAL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_NAME(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_NAME"));  if (!yymatchString(yy, "<name>")) goto l22;  yyDo(yy, yy_1_OPEN_NAME, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_NAME", yy->__buf+yy->__pos));
  return 1;
  l22:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_NAME", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_POINT_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_POINT_TAG"));  if (!yy_OPEN_POINT(yy)) goto l23;
  l24:;	
  {  int yypos25= yy->__pos, yythunkpos25= yy->__thunkpos;  if (!yy_EOL(yy)) goto l25;  goto l24;
  l25:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;
  }
  l26:;	
  {  int yypos27= yy->__pos, yythunkpos27= yy->__thunkpos;  if (!yy_WS(yy)) goto l27;  goto l26;
  l27:;	  yy->__pos= yypos27; yy->__thunkpos= yythunkpos27;
  }  if (!yy_COORDINATES_LIST(yy)) goto l23;  yyDo(yy, yySet, -1, 0);
  l28:;	
  {  int yypos29= yy->__pos, yythunkpos29= yy->__thunkpos;  if (!yy_EOL(yy)) goto l29;  goto l28;
  l29:;	  yy->__pos= yypos29; yy->__thunkpos= yythunkpos29;
  }
  l30:;	
  {  int yypos31= yy->__pos, yythunkpos31= yy->__thunkpos;  if (!yy_WS(yy)) goto l31;  goto l30;
  l31:;	  yy->__pos= yypos31; yy->__thunkpos= yythunkpos31;
  }  if (!yy_CLOSE_POINT(yy)) goto l23;  yyDo(yy, yy_1_FULL_POINT_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_POINT_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l23:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_POINT_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_DESCRIPTION_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_DESCRIPTION_TAG"));  if (!yy_OPEN_DESCRIPTION(yy)) goto l32;
  l33:;	
  {  int yypos34= yy->__pos, yythunkpos34= yy->__thunkpos;  if (!yy_EOL(yy)) goto l34;  goto l33;
  l34:;	  yy->__pos= yypos34; yy->__thunkpos= yythunkpos34;
  }
  l35:;	
  {  int yypos36= yy->__pos, yythunkpos36= yy->__thunkpos;  if (!yy_WS(yy)) goto l36;  goto l35;
  l36:;	  yy->__pos= yypos36; yy->__thunkpos= yythunkpos36;
  }  if (!yy_STRING_LITERAL(yy)) goto l32;  yyDo(yy, yySet, -1, 0);
  l37:;	
  {  int yypos38= yy->__pos, yythunkpos38= yy->__thunkpos;  if (!yy_EOL(yy)) goto l38;  goto l37;
  l38:;	  yy->__pos= yypos38; yy->__thunkpos= yythunkpos38;
  }
  l39:;	
  {  int yypos40= yy->__pos, yythunkpos40= yy->__thunkpos;  if (!yy_WS(yy)) goto l40;  goto l39;
  l40:;	  yy->__pos= yypos40; yy->__thunkpos= yythunkpos40;
  }  if (!yy_CLOSE_DESCRIPTION(yy)) goto l32;  yyDo(yy, yy_1_FULL_DESCRIPTION_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_DESCRIPTION_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l32:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_DESCRIPTION_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_NAME_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_NAME_TAG"));  if (!yy_OPEN_NAME(yy)) goto l41;
  l42:;	
  {  int yypos43= yy->__pos, yythunkpos43= yy->__thunkpos;  if (!yy_EOL(yy)) goto l43;  goto l42;
  l43:;	  yy->__pos= yypos43; yy->__thunkpos= yythunkpos43;
  }
  l44:;	
  {  int yypos45= yy->__pos, yythunkpos45= yy->__thunkpos;  if (!yy_WS(yy)) goto l45;  goto l44;
  l45:;	  yy->__pos= yypos45; yy->__thunkpos= yythunkpos45;
  }  if (!yy_STRING_LITERAL(yy)) goto l41;  yyDo(yy, yySet, -1, 0);
  l46:;	
  {  int yypos47= yy->__pos, yythunkpos47= yy->__thunkpos;  if (!yy_EOL(yy)) goto l47;  goto l46;
  l47:;	  yy->__pos= yypos47; yy->__thunkpos= yythunkpos47;
  }
  l48:;	
  {  int yypos49= yy->__pos, yythunkpos49= yy->__thunkpos;  if (!yy_WS(yy)) goto l49;  goto l48;
  l49:;	  yy->__pos= yypos49; yy->__thunkpos= yythunkpos49;
  }  if (!yy_CLOSE_NAME(yy)) goto l41;  yyDo(yy, yy_1_FULL_NAME_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_NAME_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l41:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_NAME_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_MINOR_TAGS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "MINOR_TAGS"));
  {  int yypos51= yy->__pos, yythunkpos51= yy->__thunkpos;  if (!yy_FULL_NAME_TAG(yy)) goto l52;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_1_MINOR_TAGS, yy->__begin, yy->__end);  goto l51;
  l52:;	  yy->__pos= yypos51; yy->__thunkpos= yythunkpos51;  if (!yy_FULL_DESCRIPTION_TAG(yy)) goto l53;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_2_MINOR_TAGS, yy->__begin, yy->__end);  goto l51;
  l53:;	  yy->__pos= yypos51; yy->__thunkpos= yythunkpos51;  if (!yy_FULL_POINT_TAG(yy)) goto l50;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_3_MINOR_TAGS, yy->__begin, yy->__end);
  }
  l51:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "MINOR_TAGS", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l50:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "MINOR_TAGS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_LINESTRING(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_LINESTRING"));  if (!yymatchString(yy, "</LineString>")) goto l54;  yyDo(yy, yy_1_CLOSE_LINESTRING, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_LINESTRING", yy->__buf+yy->__pos));
  return 1;
  l54:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_LINESTRING", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_COORDINATE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_COORDINATE"));  if (!yymatchString(yy, "</coordinates>")) goto l55;  yyDo(yy, yy_1_CLOSE_COORDINATE, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_COORDINATE", yy->__buf+yy->__pos));
  return 1;
  l55:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_COORDINATE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_COORDINATES_LIST(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "COORDINATES_LIST"));  if (!yy_OPEN_COORDINATE(yy)) goto l56;
  l57:;	
  {  int yypos58= yy->__pos, yythunkpos58= yy->__thunkpos;  if (!yy_EOL(yy)) goto l58;  goto l57;
  l58:;	  yy->__pos= yypos58; yy->__thunkpos= yythunkpos58;
  }
  l59:;	
  {  int yypos60= yy->__pos, yythunkpos60= yy->__thunkpos;  if (!yy_WS(yy)) goto l60;  goto l59;
  l60:;	  yy->__pos= yypos60; yy->__thunkpos= yythunkpos60;
  }  if (!yy_SINGLECOR(yy)) goto l56;  yyDo(yy, yySet, -1, 0);
  l61:;	
  {  int yypos62= yy->__pos, yythunkpos62= yy->__thunkpos;  if (!yy_SINGLECOR(yy)) goto l62;  yyDo(yy, yySet, -1, 0);  goto l61;
  l62:;	  yy->__pos= yypos62; yy->__thunkpos= yythunkpos62;
  }
  l63:;	
  {  int yypos64= yy->__pos, yythunkpos64= yy->__thunkpos;  if (!yy_EOL(yy)) goto l64;  goto l63;
  l64:;	  yy->__pos= yypos64; yy->__thunkpos= yythunkpos64;
  }
  l65:;	
  {  int yypos66= yy->__pos, yythunkpos66= yy->__thunkpos;  if (!yy_WS(yy)) goto l66;  goto l65;
  l66:;	  yy->__pos= yypos66; yy->__thunkpos= yythunkpos66;
  }  if (!yy_CLOSE_COORDINATE(yy)) goto l56;  yyDo(yy, yy_1_COORDINATES_LIST, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "COORDINATES_LIST", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l56:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COORDINATES_LIST", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_COORDINATE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_COORDINATE"));  if (!yymatchString(yy, "<coordinates>")) goto l67;  yyDo(yy, yy_1_OPEN_COORDINATE, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_COORDINATE", yy->__buf+yy->__pos));
  return 1;
  l67:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_COORDINATE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_LINESTRING(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_LINESTRING"));  if (!yymatchString(yy, "<LineString>")) goto l68;  yyDo(yy, yy_1_OPEN_LINESTRING, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_LINESTRING", yy->__buf+yy->__pos));
  return 1;
  l68:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_LINESTRING", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_PLACEMARKER(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_PLACEMARKER"));  if (!yymatchString(yy, "</Placemarker>")) goto l69;  yyDo(yy, yy_1_CLOSE_PLACEMARKER, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_PLACEMARKER", yy->__buf+yy->__pos));
  return 1;
  l69:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_PLACEMARKER", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_DESCRIPTORS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "DESCRIPTORS"));  if (!yy_MINOR_TAGS(yy)) goto l70;  yyDo(yy, yySet, -1, 0);
  l71:;	
  {  int yypos72= yy->__pos, yythunkpos72= yy->__thunkpos;  if (!yy_MINOR_TAGS(yy)) goto l72;  yyDo(yy, yySet, -1, 0);  goto l71;
  l72:;	  yy->__pos= yypos72; yy->__thunkpos= yythunkpos72;
  }  yyDo(yy, yy_1_DESCRIPTORS, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "DESCRIPTORS", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l70:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DESCRIPTORS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_PLACEMARKER(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_PLACEMARKER"));  if (!yymatchString(yy, "<Placemarker>")) goto l73;  yyDo(yy, yy_1_OPEN_PLACEMARKER, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_PLACEMARKER", yy->__buf+yy->__pos));
  return 1;
  l73:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_PLACEMARKER", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_LINESTRING_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_LINESTRING_TAG"));  if (!yy_OPEN_LINESTRING(yy)) goto l74;  if (!yy_OPEN_COORDINATE(yy)) goto l74;
  l75:;	
  {  int yypos76= yy->__pos, yythunkpos76= yy->__thunkpos;  if (!yy_EOL(yy)) goto l76;  goto l75;
  l76:;	  yy->__pos= yypos76; yy->__thunkpos= yythunkpos76;
  }
  l77:;	
  {  int yypos78= yy->__pos, yythunkpos78= yy->__thunkpos;  if (!yy_WS(yy)) goto l78;  goto l77;
  l78:;	  yy->__pos= yypos78; yy->__thunkpos= yythunkpos78;
  }  if (!yy_COORDINATES_LIST(yy)) goto l74;  yyDo(yy, yySet, -1, 0);
  l79:;	
  {  int yypos80= yy->__pos, yythunkpos80= yy->__thunkpos;  if (!yy_EOL(yy)) goto l80;  goto l79;
  l80:;	  yy->__pos= yypos80; yy->__thunkpos= yythunkpos80;
  }
  l81:;	
  {  int yypos82= yy->__pos, yythunkpos82= yy->__thunkpos;  if (!yy_WS(yy)) goto l82;  goto l81;
  l82:;	  yy->__pos= yypos82; yy->__thunkpos= yythunkpos82;
  }  if (!yy_CLOSE_COORDINATE(yy)) goto l74;  if (!yy_CLOSE_LINESTRING(yy)) goto l74;  yyDo(yy, yy_1_FULL_LINESTRING_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_LINESTRING_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l74:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_LINESTRING_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FULL_PLACEMARKER_TAG(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "FULL_PLACEMARKER_TAG"));  if (!yy_OPEN_PLACEMARKER(yy)) goto l83;
  l84:;	
  {  int yypos85= yy->__pos, yythunkpos85= yy->__thunkpos;  if (!yy_EOL(yy)) goto l85;  goto l84;
  l85:;	  yy->__pos= yypos85; yy->__thunkpos= yythunkpos85;
  }
  l86:;	
  {  int yypos87= yy->__pos, yythunkpos87= yy->__thunkpos;  if (!yy_WS(yy)) goto l87;  goto l86;
  l87:;	  yy->__pos= yypos87; yy->__thunkpos= yythunkpos87;
  }  if (!yy_DESCRIPTORS(yy)) goto l83;  yyDo(yy, yySet, -1, 0);
  l88:;	
  {  int yypos89= yy->__pos, yythunkpos89= yy->__thunkpos;  if (!yy_DESCRIPTORS(yy)) goto l89;  yyDo(yy, yySet, -1, 0);  goto l88;
  l89:;	  yy->__pos= yypos89; yy->__thunkpos= yythunkpos89;
  }
  l90:;	
  {  int yypos91= yy->__pos, yythunkpos91= yy->__thunkpos;  if (!yy_EOL(yy)) goto l91;  goto l90;
  l91:;	  yy->__pos= yypos91; yy->__thunkpos= yythunkpos91;
  }
  l92:;	
  {  int yypos93= yy->__pos, yythunkpos93= yy->__thunkpos;  if (!yy_WS(yy)) goto l93;  goto l92;
  l93:;	  yy->__pos= yypos93; yy->__thunkpos= yythunkpos93;
  }  if (!yy_CLOSE_PLACEMARKER(yy)) goto l83;  yyDo(yy, yy_1_FULL_PLACEMARKER_TAG, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FULL_PLACEMARKER_TAG", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l83:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FULL_PLACEMARKER_TAG", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_DOCUMENT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_DOCUMENT"));  if (!yymatchString(yy, "</Document>")) goto l94;  yyDo(yy, yy_1_CLOSE_DOCUMENT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_DOCUMENT", yy->__buf+yy->__pos));
  return 1;
  l94:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_DOCUMENT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_MAJOR_TAGS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "MAJOR_TAGS"));
  {  int yypos96= yy->__pos, yythunkpos96= yy->__thunkpos;  if (!yy_FULL_PLACEMARKER_TAG(yy)) goto l97;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_MAJOR_TAGS, yy->__begin, yy->__end);  goto l96;
  l97:;	  yy->__pos= yypos96; yy->__thunkpos= yythunkpos96;  if (!yy_FULL_LINESTRING_TAG(yy)) goto l95;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_MAJOR_TAGS, yy->__begin, yy->__end);
  }
  l96:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "MAJOR_TAGS", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l95:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "MAJOR_TAGS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_DOCUMENT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_DOCUMENT"));  if (!yymatchString(yy, "<Document>")) goto l98;  yyDo(yy, yy_1_OPEN_DOCUMENT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_DOCUMENT", yy->__buf+yy->__pos));
  return 1;
  l98:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_DOCUMENT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE_KML(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE_KML"));  if (!yymatchString(yy, "</Kml>")) goto l99;  yyDo(yy, yy_1_CLOSE_KML, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE_KML", yy->__buf+yy->__pos));
  return 1;
  l99:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE_KML", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_DOCUMENT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "DOCUMENT"));
  {  int yypos101= yy->__pos, yythunkpos101= yy->__thunkpos;  if (!yy_OPEN_DOCUMENT(yy)) goto l102;
  l103:;	
  {  int yypos104= yy->__pos, yythunkpos104= yy->__thunkpos;  if (!yy_EOL(yy)) goto l104;  goto l103;
  l104:;	  yy->__pos= yypos104; yy->__thunkpos= yythunkpos104;
  }
  l105:;	
  {  int yypos106= yy->__pos, yythunkpos106= yy->__thunkpos;  if (!yy_WS(yy)) goto l106;  goto l105;
  l106:;	  yy->__pos= yypos106; yy->__thunkpos= yythunkpos106;
  }  if (!yy_MAJOR_TAGS(yy)) goto l102;  yyDo(yy, yySet, -1, 0);
  l107:;	
  {  int yypos108= yy->__pos, yythunkpos108= yy->__thunkpos;  if (!yy_MAJOR_TAGS(yy)) goto l108;  yyDo(yy, yySet, -1, 0);  goto l107;
  l108:;	  yy->__pos= yypos108; yy->__thunkpos= yythunkpos108;
  }
  l109:;	
  {  int yypos110= yy->__pos, yythunkpos110= yy->__thunkpos;  if (!yy_EOL(yy)) goto l110;  goto l109;
  l110:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;
  }
  l111:;	
  {  int yypos112= yy->__pos, yythunkpos112= yy->__thunkpos;  if (!yy_WS(yy)) goto l112;  goto l111;
  l112:;	  yy->__pos= yypos112; yy->__thunkpos= yythunkpos112;
  }  if (!yy_CLOSE_DOCUMENT(yy)) goto l102;  yyDo(yy, yy_1_DOCUMENT, yy->__begin, yy->__end);  goto l101;
  l102:;	  yy->__pos= yypos101; yy->__thunkpos= yythunkpos101;  if (!yy_OPEN_DOCUMENT(yy)) goto l100;
  l113:;	
  {  int yypos114= yy->__pos, yythunkpos114= yy->__thunkpos;  if (!yy_EOL(yy)) goto l114;  goto l113;
  l114:;	  yy->__pos= yypos114; yy->__thunkpos= yythunkpos114;
  }
  l115:;	
  {  int yypos116= yy->__pos, yythunkpos116= yy->__thunkpos;  if (!yy_WS(yy)) goto l116;  goto l115;
  l116:;	  yy->__pos= yypos116; yy->__thunkpos= yythunkpos116;
  }  if (!yy_CLOSE_DOCUMENT(yy)) goto l100;  yyDo(yy, yy_2_DOCUMENT, yy->__begin, yy->__end);
  }
  l101:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "DOCUMENT", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l100:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DOCUMENT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_WS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "WS"));  if (!yymatchClass(yy, (unsigned char *)"\000\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l117;  yyDo(yy, yy_1_WS, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "WS", yy->__buf+yy->__pos));
  return 1;
  l117:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "WS", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EOL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOL"));
  {  int yypos119= yy->__pos, yythunkpos119= yy->__thunkpos;  if (!yymatchChar(yy, '\r')) goto l119;  goto l120;
  l119:;	  yy->__pos= yypos119; yy->__thunkpos= yythunkpos119;
  }
  l120:;	  if (!yymatchChar(yy, '\n')) goto l118;  yyDo(yy, yy_1_EOL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 1;
  l118:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN_KML(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN_KML"));  if (!yymatchString(yy, "<Kml>")) goto l121;  yyDo(yy, yy_1_OPEN_KML, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN_KML", yy->__buf+yy->__pos));
  return 1;
  l121:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN_KML", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_KML_DOC(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "KML_DOC"));  if (!yy_OPEN_KML(yy)) goto l122;
  l123:;	
  {  int yypos124= yy->__pos, yythunkpos124= yy->__thunkpos;  if (!yy_EOL(yy)) goto l124;  goto l123;
  l124:;	  yy->__pos= yypos124; yy->__thunkpos= yythunkpos124;
  }
  l125:;	
  {  int yypos126= yy->__pos, yythunkpos126= yy->__thunkpos;  if (!yy_WS(yy)) goto l126;  goto l125;
  l126:;	  yy->__pos= yypos126; yy->__thunkpos= yythunkpos126;
  }  if (!yy_DOCUMENT(yy)) goto l122;  yyDo(yy, yySet, -1, 0);
  l127:;	
  {  int yypos128= yy->__pos, yythunkpos128= yy->__thunkpos;  if (!yy_EOL(yy)) goto l128;  goto l127;
  l128:;	  yy->__pos= yypos128; yy->__thunkpos= yythunkpos128;
  }
  l129:;	
  {  int yypos130= yy->__pos, yythunkpos130= yy->__thunkpos;  if (!yy_WS(yy)) goto l130;  goto l129;
  l130:;	  yy->__pos= yypos130; yy->__thunkpos= yythunkpos130;
  }  if (!yy_CLOSE_KML(yy)) goto l122;
  l131:;	
  {  int yypos132= yy->__pos, yythunkpos132= yy->__thunkpos;  if (!yy_EOL(yy)) goto l132;  goto l131;
  l132:;	  yy->__pos= yypos132; yy->__thunkpos= yythunkpos132;
  }
  l133:;	
  {  int yypos134= yy->__pos, yythunkpos134= yy->__thunkpos;  if (!yy_WS(yy)) goto l134;  goto l133;
  l134:;	  yy->__pos= yypos134; yy->__thunkpos= yythunkpos134;
  }  yyDo(yy, yy_1_KML_DOC, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "KML_DOC", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l122:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "KML_DOC", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_PROGRAM(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "PROGRAM"));  if (!yy_KML_DOC(yy)) goto l135;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_1_PROGRAM, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "PROGRAM", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l135:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "PROGRAM", yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_PROGRAM);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}

#endif
#line 98 "kml.leg"


int main()
{
    int i = 0;
    //printf("i = %d",i);
    while (yyparse()){
        //printf("i = %d",i);
        ++i;
    }
    return 0;
}
