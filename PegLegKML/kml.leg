%{
           #include <stdio.h>     /* printf() */
           #include <stdlib.h>    /* atoi() */
           #include <vector>
           #include "KML.h"
           #include "generator.hpp"
           #include <iostream>
           int vars[26];
           int i = 0;
           NodePtr program(0);

           #define DEBUG 0       
%}

PROGRAM =
    kml:KML-DOC 
    {
        program = kml; 
        #if DEBUG == 1 
            printf("Valid Doc!\n"); 
        #endif
    }


KML-DOC = 
    EOL* WS* OPEN-KML EOL* WS* doc:DOCUMENT EOL* WS* CLOSE-KML EOL* WS* 
    {
        $$ = NodePtr(new KMLNode(doc)); //expecting a document node as param
    }


DOCUMENT =
    EOL* WS* OPEN-DOCUMENT EOL* WS* majortag:MAJOR-TAGS+ EOL* WS* CLOSE-DOCUMENT EOL* WS*   
    {
        $$ = NodePtr(new DocumentNode()); 
        $$->children.push_back(majortag);
    }
    |
    EOL* WS* OPEN-DOCUMENT EOL* WS* CLOSE-DOCUMENT EOL* WS* 
    {
        $$ = NodePtr(new DocumentNode());
    }


MAJOR-TAGS = 
    placemarker:FULL-PLACEMARKER-TAG    
    {
        $$ = placemarker;
    }
    |
    linestring:FULL-LINESTRING-TAG  
    {
        $$ = linestring;
    }


FULL-PLACEMARKER-TAG = 
    EOL* WS* OPEN-PLACEMARKER EOL* WS* descriptors:DESCRIPTORS+ EOL* WS* CLOSE-PLACEMARKER EOL* WS* 
    { 
        $$ = NodePtr(new PlacemarkerNode(descriptors)); 
    }


FULL-LINESTRING-TAG = 
    EOL* WS* OPEN-LINESTRING EOL* WS* corList:COORDINATES-LIST EOL* WS* CLOSE-LINESTRING EOL* WS* 
    {
        $$ = NodePtr(new LineStringNode(corList));
    }


DESCRIPTORS = 
    minortag:MINOR-TAGS+    
    {
        $$ = NodePtr(new DescriptorsNode()); 
        $$->children.push_back(minortag);
    }


MINOR-TAGS = 
    name:FULL-NAME-TAG 
    {
        $$ = name;
    }
    |
    description:FULL-DESCRIPTION-TAG 
    {
        $$ = description;
    }
    |
    point:FULL-POINT-TAG 
    {
        $$ = point;
    }


FULL-NAME-TAG = 
    EOL* WS* OPEN-NAME EOL* WS* name:STRING-LITERAL EOL* WS* CLOSE-NAME EOL* WS*
    {
        $$ = NodePtr(new NameNode(name));
    }


FULL-DESCRIPTION-TAG = 
    EOL* WS* OPEN-DESCRIPTION EOL* WS* descr:STRING-LITERAL EOL* WS* CLOSE-DESCRIPTION EOL* WS* 
    {
        $$ = NodePtr(new DescriptionNode(descr));
    }


FULL-POINT-TAG = 
    EOL* WS* OPEN-POINT EOL* WS* corList:COORDINATES-LIST EOL* WS* CLOSE-POINT EOL* WS* 
    {
        $$ = NodePtr(new PointNode(corList));
    }


COORDINATES-LIST = 
    EOL* WS* OPEN-COORDINATE EOL* WS* cor:SINGLECOR+ EOL* WS* CLOSE-COORDINATE EOL* WS* 
    {
        $$ = NodePtr(new CoordinateListNode()); 
        $$->children.push_back(cor);
    }


SINGLECOR = 
    EOL* WS* num1:NUMBER-LITERAL COMMA-DELIMETER num2:NUMBER-LITERAL COMMA-DELIMETER num3:NUMBER-LITERAL EOL* WS* 
    {
        $$ = NodePtr(new CoordinateNode(num1,num2,num3));
    }




OPEN-KML = "<Kml>"
{
    #if DEBUG == 1
        printf("OPEN-KML\n");
    #endif
}

CLOSE-KML = "</Kml>"
{
    #if DEBUG == 1
        printf("CLOSE-KML\n");
    #endif
}

OPEN-DOCUMENT = "<Document>"                        
{
    #if DEBUG == 1
        printf("OPEN-DOCUMENT\n");
    #endif
}

CLOSE-DOCUMENT = "</Document>"                      
{
    #if DEBUG == 1
        printf("CLOSE-DOCUMENT\n");
    #endif
}

OPEN-LINESTRING = "<Linestring>"                    
{
    #if DEBUG == 1
        printf("OPEN-LINESTRING\n");
    #endif
}

CLOSE-LINESTRING = "</Linestring>"                  
{
    #if DEBUG == 1
        printf("CLOSE-LINESTRING\n");
    #endif
}

OPEN-PLACEMARKER = "<Placemarker>"                  
{
    #if DEBUG == 1
        printf("OPEN-PLACEMARKER\n");
    #endif
}

CLOSE-PLACEMARKER = "</Placemarker>"                
{
    #if DEBUG == 1
        printf("CLOSE-PLACEMARKER\n");
    #endif
}

OPEN-NAME = "<name>"                                
{
    #if DEBUG == 1
        printf("OPEN-NAME\n");
    #endif
}

CLOSE-NAME = "</name>"                              
{
    #if DEBUG == 1
        printf("CLOSE-NAME\n");
    #endif
}

OPEN-DESCRIPTION = "<description>"                  
{
    #if DEBUG == 1
        printf("OPEN-DESCRIPTION\n");
    #endif
}

CLOSE-DESCRIPTION = "</description>"                
{
    #if DEBUG == 1
        printf("CLOSE-DESCRIPTION\n");
    #endif
}

OPEN-POINT = "<Point>"                              
{
    #if DEBUG == 1
        printf("OPEN-POINT\n");
    #endif
}

CLOSE-POINT = "</Point>"                            
{
    #if DEBUG == 1
        printf("CLOSE-POINT\n");
    #endif
}

OPEN-COORDINATE = "<coordinates>"                   
{
    #if DEBUG == 1
        printf("OPEN-COORDINATE\n");
    #endif
}

CLOSE-COORDINATE = "</coordinates>"                 
{
    #if DEBUG == 1
        printf("CLOSE-COORDINATE\n");
    #endif
}

COMMA-DELIMETER = ','                               
{
    #if DEBUG == 1
        printf("COMMA-DELIMETER\n");
    #endif
}

WS = [ \t]                                          
{
    #if DEBUG == 1
        printf("WS\n");
    #endif
}

EOL = '\r'?'\n'                                     
{
    #if DEBUG == 1
        printf("EOL\n");
    #endif
}

NUMBER-LITERAL = < ['+'|'-']?[0-9]+'.'?([0-9]+)? >  
{
    $$ = NodePtr(new NumberLiteralNode(atoi(yytext))); 
    #if DEBUG == 1
        printf("NUMBER-LITERAL %d\n",atoi(yytext));
    #endif
}

STRING-LITERAL = < [a-z|A-Z|" "]+ >                 
{
    $$ = NodePtr(new StringLiteralNode(yytext)); 
    #if DEBUG == 1
        printf("STRING-LITERAL %s\n",yytext);
    #endif
}

%%

int main()
{
    while (yyparse()){
    }
    if (!! program) {
    //program->print(std::cout);
    GeneratorPtr gen = generator(program);
    gen->generate(std::cout);
  } else {
    std::cout << "syntax error." << std::endl;
  }
  return 0;
    return 0;
}